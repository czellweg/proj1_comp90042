Activity Log: compressed term index
===================================

04 April 2012
-------------
- 12.05 - 13.00: reading in chapter 4 and 5 of the IR book, take notes of important concepts
  	* list of resources:
	http://www.ir.iit.edu/~dagr/cs529/files/handouts/02aCompression-2per.PDF
	eBook: Introduction to Information Retrieval, Manning et al., chapter 4, 5
	Index compression: www.ir.uwaterloo.ca/book/06-index-compression.pdf
	PhD thesis by Roi Blanco Gonzales 'Index Compression for Information Retrieval Systems'
	http://www.ir.uwaterloo.ca/slides/buettcher_index_compression.pdf
	http://orion.lcg.ufrj.br/Dr.Dobbs/books/book5/chap03.htm
	Gamma-Codes well explained: http://www.cs.clemson.edu/~juan/CPSC862/Concept-50/IR-Compression.pdf


11 April, 2012
--------------
- 10.40 - 11.00: make a ToDo list, ordered by priority
- 11.00 - 12.00: skim through the resources (see above) and take note of important concepts, find a simple algorithm to implement
	* chapter 5 (IRBook) talks about variable byte (VB) codes (docID gap compression)
	* word size of 1 byte seems to be a good compromise between compression ratio and speed of decompression (page 98)
	* as a first go, I'll implement a VB-algorithm as outlined with pseudo-code on page 97
	* I'll test my implementation with handmade postings-list & the postings list format will be a simple docId-index, 
	e.g. term1 -> 1,4,6,7,9,34,124, term2 -> 34,456,67,78,90,1234,3456
	* the data-structure I want to use is: (term1, [1,4,6,7,9,34,124])


- 12.00 - 13.00: search for & examine off-the-shelf implementations of IF compression algorithms
	* also checked out Lucene/PyLucene: to test my algorithm, I can maybe create an index (e.g. over the NLTK reuters corpus) and 
	retrieve the postings list for a given term
	* read some tutorials on http://www.lucenetutorial.com/ on how to use Lucene and how to create an index from documents in a directory
	* as it turns out, Lucene uses the VB compression algorithm described in chapt 5 too, see http://lucene.apache.org/core/old_versioned_docs/versions/3_5_0/fileformats.html#VInt
	* the Lucene index tool 'Luke' was of help to find out what Lucene actually saves in the index
	* this brought me to the idea that I can simply use an IndexReader to get the necessary information that Luke displays

	* also looked at Whoosh, a pure Python indexing and search library -> decided to go with Lucene first and see how far I get,
	if Lucene doesn't turn out to be a good choice, I try out Whoosh

- 13.00 - 14.15: implementing simple Java Lucene index based on NLTKs Reuters corpora and output a postings list
	* I want to extract an inverted index from this so that I can test my VB compression algorithm
	* implementation outputs: "term1 -> [docid_1, docid_2, docid_3,..., docId_n]"
	* this can be used as index to test my compression algorithm


12 April, 2012
--------------
- 10.30 - 13.00: since yesterday's attempts at creating the index were successful, I want to build the same class but using PyLucene this time
	* downloading and compiling JCC to be able to install PyLucene
	* compiling PyLucene worked well, and part of the installation was smooth as well. However, had to recompile multiple times to get
	the correct combination of arguments
	* seeing that I've lost quite some time on this already, I'm just using the Java-code generated output for my simple inverted index
	without re-implementing the whole thing in python again - if there is still some time left at the end, I'll implement it

- 13.00 - 14.00: tried to get 'git push' to work but something seems to be wrong with my SSH keys
	* when I run: ssh -T git@github.com -> it works fine, authentication successful
	* however, if I run 'git remote add origin czellweg@github.com:czellweg/proj1_comp90042.git' I get a 'Permission denied (publickey)' error
	* okay, stupid me: use user 'git' instead of 'czellweg' -> 'git remote add origin git@github.com:czellweg/proj1_comp90042.git' - copy-paste
	 without thinking is sometimes the way forward ;-)

- 14.00 - 16.00: implementing VB-algorithm as outlined with pseudo-code in IRBook on page 97
	* at first, I didn't realize that the VBEncodeNumber should output binary representations
	* now finding the best way to represent a number as binary sequence, looked at bytearrays, need further investigation. Seems to be an easy
	enough problem but couldn't find a quick solution so far
	* 

